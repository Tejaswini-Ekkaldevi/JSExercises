1> String 1
 helloName. Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".
function helloName(name){
  return 'Hello ' + name + '!';
};

2> Make abba. Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".

function makeAbba(a, b){
  return (a+b+b+a);
}

3> String-1 -- makeTags
The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string with tags around the word, e.g. "<i>Yay</i>".

function makeTags(tag, word){
  return '<'+tag+'>' +word+ '</'+tag+'>'
}

4> String-1 -- makeOutWord
//Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string, e.g. "<<word>>". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.
function makeOutWord(out, word){
  return out.substring(0,2) +word+ out.substring(2,4)
}

5> String-1 -- extraEnd
//Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.
function extraEnd(str){
  let a = str.substring(str.length-2,str.length);
  return a + a + a;
}

6> String-1 -- firstTwo
Given a string, return the string made of its first two chars, so the String "Hello" yields "He". If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "". Note that str.length() returns the length of a string.

function firstTwo(str){
  return str.substring(0,2);
}

7> String-1 -- comboString
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).

function comboString(a, b){
  if(a.length > b.length){
    return b + a + b;
  }
  else{
    return a + b + a;
  }
}

8> String-1 -- right2
Given a string, return a "rotated right 2" version where the last 2 chars are moved to the start. The string length will be at least 2.

function right2(str){
  let a = str.substring(str.length-2, str.length)
  return a + str.substring(0,str.length-2);  
}

9> String-1 -- nTwice
Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.

function nTwice(str, n){
  return str.substring(0, n) + str.substring(str.length - n, str.length)
}

10> String-1 -- middleThree
Given a string of odd length, return the string length 3 from its middle, so "Candy" yields "and". The string length will be at least 3.
function middleThree(str){
  let mid = str.length / 2;
  if(str.length > 3){
    return str.substring(mid-1, mid + 2); 
  }
  else{
    return str;
  }
}

11> String-1 -- atFirst
Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.
function atFirst(str){
  if(str.length < 2){
    if(str.length === 1)
      return str + '@';
    else
      return '@@';
  }
  else {
    return str.substring(0, 2);
  }
}

12> String-1 -- lastChars
Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so "yo" and "java" yields "ya". If either string is length 0, use '@' for its missing char.
function lastChars(a, b){
  if(a.length === 0 && b.length === 0){
    return '@@';
  }
  else if(a.length === 0){
    return '@' + b.substring(b.length,b.length-1);
  }
  else if( b.length === 0){
    return  a.substring(0,1) + '@'
  }
  else
    return a.substring(0,1) + b.substring(b.length,b.length-1)
}

13> String-1 -- conCat
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation creates a double-char, then omit one of the chars, so "abc" and "cat" yields "abcat".

function conCat(a, b){
  if(a.substring(a.length-1,a.length) === b.substring(0,1)){
    return a + b.substring(1, b.length);
  }
  return a + b;
}

14> String-1 -- lastTwo
Given a string of any length, return a new string where the last 2 chars, if present, are swapped, so "coding" yields "codign".
function lastTwo(str){
  return str.substring(0, str.length-2) + str.charAt(str.length-1) + str.charAt(str.length-2);
}

15> String-1 -- seeColor
Given a string, if the string begins with "red" or "blue" return that color string, otherwise return the empty string.

function seeColor(str){
  if(str.substring(0, 3) === 'red'){
    return 'red';
  }
  else if(str.substring(0,4) === 'blue'){
    return 'blue';
  }
  else
    return '';
}

16> String-1 -- minCat
Given two strings, append them together (known as "concatenation") and return the result. However, if the strings are different lengths, omit chars from the longer string so it is the same length as the shorter string. So "Hello" and "Hi" yield "loHi". The strings may be any length.

function minCat(a, b){
  let a1 = a.length - b.length;
  let b1 = b.length - a.length;
  if(a.length === b.length){
    return a + b;
  }
  else if(a.length >  b.length){
    return a.substring(a1,a.length) + b;
  }
  else{
    return a + b.substring(b1, b.length);
  }
}

17> String-1 -- startWord
Given a string and a second "word" string, we'll say that the word matches the string 
if it appears at the front of the string, except its first char does not need to match exactly. 
On a match, return the front of the string, or otherwise return the empty string. 
So, so with the string "hippo" the word "hi" returns "hi" and "xip" returns "hip". The word will be at least length 1.
function startWord(str, word){
  let strlen = str.length;
  let wordlen = word.length;
  if(strlen === 0){
    return '';
  }
  if(wordlen === 1){
    return str.substring(0,1);
  }
  else if(str.substring(1,wordlen)===(word.substring(1,wordlen))){
    return str.substring(0, wordlen);
  }
  else{
    return '';
  }
}

**18> String-1 -- withoutX
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged.

function withoutX(str){
  let a = str.length;
  if(str.substring(0,1) === 'x') {
    return str.substring(1,a);
  }
  else if( str.substring(a-1,a) === 'x'){
    return str.substring(0, a-1);
  }
  else if((str.substring(0,1)) === 'x' && (str.substring(a-1,a)) === 'x'){
  // else if((str.charAt(0) === 'x') && (str.chatAt(a-1) === 'x')){  
    return str.substring(0, a-1);
  }
  else
    return str;
}
